Task005:

public class ExcepTest {

   public static void main(String args[]) {
      try {
         int a[] = new int[2];
         int b = 0;
         int c = 1/b;
         System.out.println("Access element three :" + a[3]);
      }
      catch (ArrayIndexOutOfBoundsException e) {
         System.out.println("ArrayIndexOutOfBoundsException thrown  :" + e);
      }catch (Exception e) {
          System.out.println("Exception thrown  :" + e);
      }
      System.out.println("Out of the block");
   }
}

Task006:
public class ExcepTest {

   public static void main(String args[]) {
      try {
         int a[] = new int[2];
        System.out.println("Access element three :" + a[2]);
         try {
            int b = 0;
            int c = 1/b;
         }catch(Exception e) {
            System.out.println("Exception thrown: " + e);
         }
         System.out.println("Access element three :" + a[3]);
      }
      catch (ArrayIndexOutOfBoundsException e) {
         System.out.println("Exception thrown: " + e);
      }
      System.out.println("Out of the block");
   }
}

Task007:


class MyClass {

    static void fun() throws IllegalAccessException
    {
        System.out.println("Inside fun(). ");
        throw new IllegalAccessException("demo exception by fun method");
    }

    public static void main(String args[]) 
    {
        try {
            fun();
	//method2();   → arrayindex…
	//Method3()  —> file not found….
        }
        catch (IllegalAccessException e) {
            System.out.println("Caught in main." + e.getMessage());
        }
    }
}


Task008:
class MyException extends Exception {
    public MyException(String m) {
        super(m);
    }
}

// A Class that uses the above MyException
public class setText {
    public static void main(String args[]) {
        try {
            
            // Throw an object of user-defined exception
            throw new MyException("This is a custom exception");  
        }
        catch (MyException ex) {
            System.out.println("Caught");  
            System.out.println(ex.getMessage());  
        }
    }
}


Task009:
import java.util.ArrayList;
class Main {
    public static void main (String[] args) {        
      	// Creating an ArrayList
      	ArrayList<Integer> a = new ArrayList<Integer>();      	
      	// Adding Element in ArrayList
      	a.add(1);
      	a.add(2);
      	a.add(3);
      
      	// Printing ArrayList
      	System.out.println(a);      	
    }
}

Task010:

import java.util.*;
class Main {
    public static void main(String args[]){      
        ArrayList<String> al = new ArrayList<>();      
        al.add("Prasunamba");
        al.add("Meher");
      	System.out.println("Orignal List : "+al);
    
        al.add(1, "Hello");
      	System.out.println("After Adding element at index 1 : "+ al);
      	
      	al.remove(0);     
      	System.out.println("Element removed from index 0 : "+ al);
      	
      	al.remove("Prasunamba");      
      	System.out.println("Element Prasunamba removed : "+ al);
      
       	al.set(0, "K");
        System.out.println("List after updation of value : "+al);
    }
}

Task011:

class OuterClass {
  int x = 10;
  class InnerClass {
    int y = 5;
  }
}

public class Main {
  public static void main(String[] args) {
    OuterClass myOuter = new OuterClass();
    OuterClass.InnerClass myInner = myOuter.new InnerClass();
    System.out.println(myInner.y + myOuter.x);
  }
}


Task014:

class OuterClass{
	Int x = 50;
Class InnerClass {
		Public int innerMethod() {
			Return x;
		}
}
}

Public class DriverClass {
	psvm(){
		OuterClass myOuter = new OuterClass();
		OuterClass.InnerClass myInner = myOuter.new InnerClass();
    		System.out.println(myInner.innerMethod());
}
}

Task015:

class OuterClass {
  int x = 10;
  static class InnerClass {
    static int y = 5;
  }
}
public class Main {
  public static void main(String[] args) {
     OuterClass.InnerClass myInner = new OuterClass.InnerClass();
    System.out.println(myInner.y);

  }
}

Task016:

abstract class Person {
    private String name;
    private int age;

    // Constructor
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Getters and Setters
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public int getAge() { return age; }
    public void setAge(int age) { this.age = age; }

    // Abstract method
    public abstract String toString();
}

class Customer extends Person {
    private String customerId;
    private String address;

    public Customer(String name, int age, String customerId, String address) {
        super(name, age);
        this.customerId = customerId;
        this.address = address;
    }

    public String getCustomerId() { return customerId; }
    public void setCustomerId(String customerId) { this.customerId = customerId; }

    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }

    @Override
    public String toString() {
        return "Customer: Name=" + getName() + ", Age=" + getAge() +
               ", Customer ID=" + customerId + ", Address=" + address;
    }
}

class Employee extends Person {
    private String employeeId;
    private double salary;

    public Employee(String name, int age, String employeeId, double salary) {
        super(name, age);
        this.employeeId = employeeId;
        this.salary = salary;
    }

    public String getEmployeeId() { return employeeId; }
    public void setEmployeeId(String employeeId) { this.employeeId = employeeId; }

    public double getSalary() { return salary; }
    public void setSalary(double salary) { this.salary = salary; }

    @Override
    public String toString() {
        return "Employee: Name=" + getName() + ", Age=" + getAge() +
               ", Employee ID=" + employeeId + ", Salary=" + salary;
    }
}

class Manager extends Employee {
    private String department;
    private int teamSize;

    public Manager(String name, int age, String employeeId, double salary, String department, int teamSize) {
        super(name, age, employeeId, salary);
        this.department = department;
        this.teamSize = teamSize;
    }

    public String getDepartment() { return department; }
    public void setDepartment(String department) { this.department = department; }

    public int getTeamSize() { return teamSize; }
    public void setTeamSize(int teamSize) { this.teamSize = teamSize; }

    @Override
    public String toString() {
        return "Manager: Name=" + getName() + ", Age=" + getAge() +
               ", Employee ID=" + getEmployeeId() + ", Salary=" + getSalary() +
               ", Department=" + department + ", Team Size=" + teamSize;
    }
}

public class Main {
    public static void main(String[] args) {
        Customer cust = new Customer("Alice", 25, "C101", "Bangalore");
        Employee emp = new Employee("Bob", 30, "E202", 55000.0);
        Manager mgr = new Manager("Charlie", 40, "M303", 85000.0, "IT", 10);

        System.out.println(cust);
        System.out.println(emp);
        System.out.println(mgr);
    }
}


