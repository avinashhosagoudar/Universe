
--------------------------------------------------------------------------------------------------------------
Task008:  Write a program to create a class named Customer 
Call the customer class in Task008 class using an object.

public class Task008 {
   public static void main(String[] args) {
       Customer obj= new Customer();
       obj.display();
       obj.accept();

    }
}
class Customer{
    void display(){
        System.out.println("display Customer called");
    }
    void accept(){
        System.out.println("accept Customer called");
    }
}

o/p:
display Customer called
accept Customer called

---------------------------------------------------------------------------------------------------------------

Task009: Wap to check the greater of 2 numbers


import java.util.Scanner;
class Task009 {
   public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
       System.out.println("Enter value of a = ");
       int a = sc.nextInt();
       System.out.println("Enter value of b = ");
       int b = sc.nextInt();
       
       if (a > b){
       System.out.println("a is greater");
       }
       else{
           System.out.println("b is greater than a");
       }
       
     
       
    }
}

o/p: 
Enter value of a = 
10
Enter value of b = 
20
b is greater than a
--------------------------------------------------------------------------------------------------

Task0010: Wap to check greater of 3 numbers 

import java.util.Scanner;
class Task0010 {
   public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
       System.out.println("Enter value of a = ");
       int a = sc.nextInt();
       System.out.println("Enter value of b = ");
       int b = sc.nextInt();
       System.out.println("Enter value of c = ");
       int c = sc.nextInt();
       
       if (a >= b && a >= c){
       System.out.println("a is greater");
       }
       else if (b >= a && b >= c){
           System.out.println("b is greater ");
       }
       else {
           System.out.println("c is greater ");
           
       }
       
     
       
    }
}

 o/p:
Enter value of a = 
30
Enter value of b = 
20
Enter value of c = 
70
c is greater 

-----------------------------------------------------------------------------------
Task11:

Wap to check if  week days 

import java.util.Scanner;
class Task009 {
   public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
       
       System.out.println("Enter a Day =");
       int day = sc.nextInt();
       switch (day){
           case 1:
               System.out.println("monday");
               break;
            case 2:
               System.out.println("Tuesday");
               break;
             case 3:
               System.out.println("Wednesday");
               break;
             case 4:
               System.out.println("Thursday");
               break;
             case 5:
               System.out.println("Friday");
               break;
             case 6:
               System.out.println("Saturday");
               break;
             case 7:
               System.out.println("Sunday");
               break;
              default:
                System.out.println("wrong Selection");
                break;
               
               
       }
     
       
     
       
    }
}

o/p:


Enter a Day =
6
Saturday
---------------------------------------------------------------------------------------------------

Task 012 while loop

Wap to check loginid and password validation

import java.util.Scanner;
class Task012 {
   public static void main(String[] args) {
       Scanner sc=new Scanner(System.in);
       
        String loginid = "Avinash";
        String pwd = "12345678";
        int Count = 0;

       while(loginid.equals("Avinash") && pwd.equals("12345678")){
        System.out.println(" you have logged in for   "  + Count++);
    	System.out.println("enter ur login id and password");
	     loginid = sc.nextLine();
	     pwd = sc.nextLine();	
	    
}
 Count++;

     
       
     
       
    }
}

o/p:
 you have logged in for   0
enter ur login id and password
Avinash
12345678
 you have logged in for   1
enter ur login id and password
Avinash
12345678
 you have logged in for   2
enter ur login id and password
avi
123


     
 do while 
---------------------------    
     
       
import java.util.Scanner;
class Task012 {
   public static void main(String[] args) {
       Scanner sc=new Scanner(System.in);
       
        String loginid = "Avinash";
        String pwd = "12345678";
        int Count = 0;

       do {
        System.out.println(" you have logged in for   "  + Count++);
    	System.out.println("enter ur login id and password");
	     loginid = sc.nextLine();
	     pwd = sc.nextLine();	
	    
} while (loginid.equals("Avinash") && pwd.equals("12345678"));
 Count++;

     
       
     
       
    }
}


o/p:
 you have logged in for   0
enter ur login id and password
Avinash
12345678
 you have logged in for   1
enter ur login id and password
Avinash
12345678
 you have logged in for   2
enter ur login id and password
avi
123

-------------------------------------------------------------------------------------------------------------------


Task 13:

Wap to display numbers from 10 to 1 .. skip 7 and 5.

for(int i= 10; i >0; i–){
	If ( i == 5 || i == 7){
		Continue;
	sout(i);
}


0/p:  10 9 8 6 4 3 2 1
------------------------------------------------------------------------------------------------------------------
Task 014:

Arrays:

Try the below code and display the output… 
Now play with it try to access arr of 5th index and see the output…and try to access arr of -1 index and see the output..

package Arrays;
class Task014 {
   public static void main(String[] args) {
       	char[] arr = {'a','e','i','o','u'};
		System.out.println(arr);
		String[] names = {"Meena", "Tina", "Veena", "heena"};
		System.out.println(names[0]);
		names[1]= "Reena";
		System.out.println(names[1]);
		System.out.println(names.length);
		System.out.println(names[3]); 
 

     
       
    }
}



o/p:

aeiou
Meena
Reena
4
heena
----------------------------------------------------------------------------------------------------
Strings:

Task 015:

String – non primitive data gtype —> collection of characters or any value within “ ”

package StringHandling;
class Task015 {
   public static void main(String[] args) {
       
       String str1 = "Java Strings "; // string Literal
		String str2 = new String(str1); // obj of the string - new keyword
		String str3 = new String("are easy to learn ");
		char ch[] = {'S', 't', 'r' ,'i', 'n', 'g'}; 
		String str4 = new String(ch);
		System.out.println(str1 + "\n" + str2 + "\n" +str3 + "\n" +str4);

       
    }
}

o/p:
Java Strings 
Java Strings 
are easy to learn 
String
-------------------------------------------------------------------------------------------------------------
Task 016

Enums or Enumerations   – part of  collection framework

public class Main {

	public static void main(String[] args) {
		Weekdays c1 = Weekdays.Tuesday;
		System.out.println(c1);	
	}
}
enum Weekdays{
	Sunday , Monday , Tuesday 	
}
o/p:
Tuesday


enum color{
	red , yello , blue 	
}
public class Task015{

	public static void main(String[] args) {
		color c1 = color.yellow;
		System.out.println(c1);	
	}
}

o/p:
yellow

------------------------------------------------------------------------------------------------------------
Tsk 31



class Calculation {
    int z;

    public void addition(int x, int y) {
        z = x + y;
        System.out.println("The sum of the given numbers: " + z);
    }

    public void subtraction(int x, int y) {
        z = x - y;
        System.out.println("The difference between the given numbers: " + z);
    }
}

class MyCalculation extends Calculation {
    public void multiplication(int x, int y) {
        z = x * y;
        System.out.println("The product of the given numbers: " + z);
    }
}

public class Task031 {
    public static void main(String[] args) {
        int a = 20, b = 10;

        MyCalculation demo = new MyCalculation();
        demo.addition(a, b);
        demo.subtraction(a, b);
        demo.multiplication(a, b);
    }
}
----------------------------------------------------------------------------------------------------------------
Task 32:


class Calculation {
    int z;

    public void addition(int x, int y) {
        z = x + y;
        System.out.println("The sum of the given numbers: " + z);
    }

    public void subtraction(int x, int y) {
        z = x - y;
        System.out.println("The difference between the given numbers: " + z);
    }
}

class Clock {
    public void showTime() {
        System.out.println("Current time: 10:00 AM");
    }
}


class MyCalculation extends Calculation, Clock {
    public void multiplication(int x, int y) {
        z = x * y;
        System.out.println("The product of the given numbers: " + z);
    }
}

public class Task031 {
    public static void main(String[] args) {
        MyCalculation demo = new MyCalculation();

        demo.addition(20, 10);
        demo.subtraction(20, 10);
        demo.multiplication(20, 10);
        demo.showTime();
    }
}
---------------------------------------------------------------------------------------------------------------
task 33:



class Customer{
    int cost = 40;
    String items = "Tomatoes";
    Customer(){
        System.out.println("Constructor called");
    }
    void purchage_list(){
        System.out.println("cost of tomatoes in Customer class is "+ cost);
    }
}
public class Task033 extends Customer {
   
    void billing(){
        String items = "onions";
        int cost = 30;
 
        super.items = "Potatoes";  
        super.cost = 50;
        super.purchage_list();
       
        System.out.println(items);
        System.out.println(cost);
        System.out.println("***************************");
        System.out.println(super.items);
        System.out.println(super.cost);
        // return 0;
    }
    public static void main(String[] args){    
        Customer cobj =new Customer();
        cobj.purchage_list();
        Task033 tobj = new Task033();
        tobj.billing();    
       
    }
 
}
 
/*
 * output:
 *
 * Constructor called
cost of tomatoes in Customer class is 40
Constructor called
cost of tomatoes in Customer class is 50
onions
30
***************************
Potatoes
50
 */

--------------------------------------------------------------------------------------------------
Task033_1:


class Superclass{
    int var;
    Superclass(int var){
        this.var = var;
    }
    public void getVar(){
        System.out.println("var value in super class is "+ var);
    }
}
 
public class Task033_1 extends Superclass{
    Task033_1(int var) {
        super(var);
    }
    public static void main(String[] args){
        Superclass sobj = new Superclass(100);
        sobj.getVar();
    }
}
 -----------------------------------------------------------------------------------------------------------

	Task 034

Void add(int x, int y){
	Sout —> x and y values
}
Void add(int x, int y, int z){
	Sout	—-> x, y, z values

}
psvm(){
	add(10,20,30);
	add(50,100);
}
	

Type of parameters

	Task 035

Void add(char x, char y){
	Sout	—-> x, y values
}
	
Void add(int x, int y) {
	Sout	—> x, y values
}

psvm(){
	add(‘d’, ‘a’);
	add(100, 100);
}


Sequence of Parameters

	Task 036

Void add(int x, float y){
	Sout → x, y values
}
Void add(float x, int y){
	Sout  → x, y
}
psvm(){
	add(10.50f, 60);
	add(100, 80.80f)
}

-------------------------------------------------------------------------------------------------------------
Task037:


Class Employee{
	Private int pwd;
	Protected int Salary;
	Public int empid:
	
	employee(){ // constructors are methods having same name as class name  (we have in c++)
	}
	~employee(){// destructors used in c++ but not in java
	}

}
Class Hr extends Employee {
	super.pwd = 1254; //===============>  ??????
	super.Salary = 50000; //==================>  ?
Super.empid = 10001; // ======================>? 
}

Class Driver{
	psvm(){
		Access all variables…????  
		super.pwd = 1254; //===============>  ??????
		super.Salary = 50000; //==================>  ?
Super.empid = 10001; // ======================>? 
}
}


------------------------------------------------------------------------------------------------------------------
Task038:

Public class AbstractDemo {

   public static void main(String [] args) {
      /* Following is not allowed and would raise error */
      Employee e = new Employee("George W.", "Houston, TX", 43);
      System.out.println("\n Call mailCheck using Employee reference--");
      e.mailCheck();
   }
}

abstract class Employee {
   private String name;
   private String address;
   private int number;

   public Employee(String name, String address, int number) {
      System.out.println("Constructing an Employee");
      this.name = name;
      this.address = address;
      this.number = number;
   }
   
   public double computePay() {
     System.out.println("Inside Employee computePay");
     return 0.0;
   }
   
   public void mailCheck() {
      System.out.println("Mailing a check to " + this.name + " " + this.address);
   }

   public String toString() {
      return name + " " + address + " " + number;
   }

   public String getName() {
      return name;
   }
 
   public String getAddress() {
      return address;
   }
   
   public void setAddress(String newAddress) {
      address = newAddress;
   }
 
   public int getNumber() {
      return number;
   }
}

----------------------------------------------------------------------------------------------------------------------------
Task039:

public class AbstractDemo {

   public static void main(String[] args) {
      // Create an object of the subclass
      SalariedEmployee e = new SalariedEmployee("George W.", "Houston, TX", 43);
      System.out.println("\nCall mailCheck using Employee reference--");
      e.mailCheck();
   }
}

// Abstract class
abstract class Employee {
   private String name;
   private String address;
   private int number;

   public Employee(String name, String address, int number) {
      System.out.println("Constructing an Employee");
      this.name = name;
      this.address = address;
      this.number = number;
   }

   public double computePay() {
      System.out.println("Inside Employee computePay");
      return 0.0;
   }

   public void mailCheck() {
      System.out.println("Mailing a check to " + this.name + " " + this.address);
   }

   public String toString() {
      return name + " " + address + " " + number;
   }

   public String getName() {
      return name;
   }

   public String getAddress() {
      return address;
   }

   public void setAddress(String newAddress) {
      address = newAddress;
   }

   public int getNumber() {
      return number;
   }
}

// Concrete subclass
class SalariedEmployee extends Employee {
   public SalariedEmployee(String name, String address, int number) {
      super(name, address, number);
   }

   // Optionally override methods here
}

----------------------------------------------------------------------------------------------------------------------------
Task 40:


// Working of Abstraction in Java
abstract class Gadgets {
    abstract void turnOn();
    abstract void turnOff();
}
// Concrete class implementing the abstract methods
class TVRemote extends Gadgets {
    @Override
    void turnOn() {
        System.out.println("TV is turned ON.");
    }

    @Override
    void turnOff() {
        System.out.println("TV is turned OFF.");
    }
}
class ACRemote extends Gadgets {
    @Override
    void turnOn() {
        System.out.println("AC is turned ON.");
    }

    @Override
    void turnOff() {
        System.out.println("AC is turned OFF.");
    }
}

// Main class to demonstrate abstraction
public class Main {
    public static void main(String[] args) {
        Gadgets remote = new TVRemote();
        Gadgets remote = new ACRemote();
       remote.turnOn();   
        remote.turnOff();  

        Gadgets remote = new FanRemote();
        Gadgets remote = new CoolerRemote();
        remote.turnOn();   
        remote.turnOff();  
    }
}

-----------------------------------------------------------------------------------------------------------------------
Task40:

import java.io.*;
// Interface Declared
//Driver Code Ends
interface testInterface {  
    // public, static and final
    final int tax = 10;
    // public and abstract
    void display();
}


// Class implementing interface
class TestClass implements testInterface {  
    // Implementing the capabilities of
    // Interface
    public void display(){ 
      System.out.println("Myclass"); 
    }
}
class Myclass
//Driver Code Starts
{
    public static void main(String[] args)
    {
        TestClass t = new TestClass();
        t.display();
        System.out.println(t.a);
    }


}

