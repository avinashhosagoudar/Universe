https://docs.google.com/document/d/1EcEMFroqTD7U3l83N2dyt8mWLSRgh9YHdZuF194uXFg/edit?tab=t.0



// Online Java Compiler
// Use this editor to write, compile and run your Java code online

uisng linkedlist  insertion and deletion of data

class Node {
    int data;
    Node next;

    // Constructor
    Node(int value) {
        data = value;
        next = null;
    }
}

class LinkedList {
    private Node head;

    // Constructor
    public LinkedList() {
        head = null;
    }

    // Insert at end
    public void insertAtEnd(int value) {
        Node newNode = new Node(value);
        if (head == null) {
            head = newNode;
        } else {
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newNode;
        }
    }

    // Delete by value
    public void deleteByValue(int value) {
        if (head == null) return;

        if (head.data == value) {
            head = head.next;
            return;
        }

        Node temp = head;
        while (temp.next != null && temp.next.data != value) {
            temp = temp.next;
        }

        if (temp.next != null) {
            temp.next = temp.next.next;
        }
    }

    // Display the list
    public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.println("NULL");
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        list.insertAtEnd(10);
        list.insertAtEnd(20);
        list.insertAtEnd(30);

        System.out.print("Linked List: ");
        list.display();

        list.deleteByValue(20);

        System.out.print("After Deleting 20: ");
        list.display();
    }
}


import java.util.Scanner;

class Node {
    Object data; // Accept any type of data
    Node next;

    Node(Object value) {
        data = value;
        next = null;
    }
}

class LinkedList {
    private Node head;

    public LinkedList() {
        head = null;
    }

    // Insert at end
    public void insertAtEnd(Object value) {
        Node newNode = new Node(value);
        if (head == null) {
            head = newNode;
        } else {
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newNode;
        }
    }

    // Display the list
    public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("NULL");
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        Scanner scanner = new Scanner(System.in);

        System.out.print("How many elements? ");
        int n = Integer.parseInt(scanner.nextLine());

        for (int i = 0; i < n; i++) {
            System.out.print("Enter value " + (i + 1) + ": ");
            String input = scanner.nextLine();
            // Store input as Object (you can later convert if needed)
            list.insertAtEnd(input);
        }

        System.out.print("Linked List: ");
        list.display();
    }
}


public class Main {
    public static void main(String[] args) {
        CustomLinkedList list = new CustomLinkedList();

        list.add(10);
        list.add("Java");
        list.add(3.14);
        list.add(true);

        System.out.print("All Elements: ");
        list.display();

        System.out.println("Size: " + list.getSize());

        System.out.println("Element at index 2: " + list.get(2));

        list.remove("Java");

        System.out.print("After removing 'Java': ");
        list.display();

        System.out.println("Size: " + list.getSize());

        // Uncomment this to test IndexOutOfBounds
        // System.out.println(list.get(10)); // Throws exception
    }
}
--------------------------------------------------------------------------------------------------------------------------------------
Task004:



class Node {
    Object data;
    Node next;

    Node(Object data) {
        this.data = data;
        this.next = null;
    }
}

class CustomLinkedList {
    private Node head;
    private int size;

    public CustomLinkedList() {
        head = null;
        size = 0;
    }

    // 1. Create & Insert at End
    public void add(Object data) {
        Node newNode = new Node(data);
        size++;

        if (head == null) {
            head = newNode;
            return;
        }

        Node temp = head;
        while (temp.next != null)
            temp = temp.next;

        temp.next = newNode;
    }

    // 2. Remove node by value
    public void remove(Object data) {
        if (head == null) return;

        if (head.data.equals(data)) {
            head = head.next;
            size--;
            return;
        }

        Node temp = head;
        while (temp.next != null && !temp.next.data.equals(data)) {
            temp = temp.next;
        }

        if (temp.next != null) {
            temp.next = temp.next.next;
            size--;
        } else {
            System.out.println("Value not found.");
        }
    }

    // 3. Display list
    public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("NULL");
    }

    // 4. Size of the list
    public int getSize() {
        return size;
    }

    // 5. Get element at specific index (with index check)
    public Object get(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Index " + index + " is out of bounds.");
        }

        Node temp = head;
        for (int i = 0; i < index; i++)
            temp = temp.next;

        return temp.data;
    }
}


public class Main {
    public static void main(String[] args) {
        CustomLinkedList list = new CustomLinkedList();

        list.add(10);
        list.add("Java");
        list.add(3.14);
        list.add(true);

        System.out.print("All Elements: ");
        list.display();

        System.out.println("Size: " + list.getSize());

        System.out.println("Element at index 2: " + list.get(2));

        list.remove("Java");

        System.out.print("After removing 'Java': ");
        list.display();

        System.out.println("Size: " + list.getSize());

        // Uncomment this to test IndexOutOfBounds
        // System.out.println(list.get(10)); // Throws exception
    }
}

---------------------------------------------------------------------------------------------------------------------------
import java.util.Scanner;

class Node {
    Object data;
    Node next;

    Node(Object data) {
        this.data = data;
        this.next = null;
    }
}

class CustomLinkedList {
    private Node head;
    private int size;

    public void add(Object data) {
        Node newNode = new Node(data);
        size++;

        if (head == null) {
            head = newNode;
            return;
        }

        Node temp = head;
        while (temp.next != null)
            temp = temp.next;

        temp.next = newNode;
    }

    public void remove(Object data) {
        if (head == null) return;

        if (head.data.equals(data)) {
            head = head.next;
            size--;
            return;
        }

        Node temp = head;
        while (temp.next != null && !temp.next.data.equals(data)) {
            temp = temp.next;
        }

        if (temp.next != null) {
            temp.next = temp.next.next;
            size--;
        } else {
            System.out.println("Value not found.");
        }
    }

    public void display() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("NULL");
    }

    public int getSize() {
        return size;
    }

    public Object get(int index) {
        if (index < 0 || index >= size)
            throw new IndexOutOfBoundsException("Index " + index + " is out of bounds.");

        Node temp = head;
        for (int i = 0; i < index; i++)
            temp = temp.next;

        return temp.data;
    }
}


public class Main {
    public static void main(String[] args) {
        CustomLinkedList list = new CustomLinkedList();
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("\n----- MENU -----");
            System.out.println("1. Add Element");
            System.out.println("2. Remove Element");
            System.out.println("3. Display List");
            System.out.println("4. Get Size");
            System.out.println("5. Get Element by Index");
            System.out.println("6. Exit");
            System.out.print("Choose an option: ");

            int choice = sc.nextInt();
            sc.nextLine(); // consume leftover newline

            switch (choice) {
                case 1:
                    System.out.print("Enter any value (string, number, etc.): ");
                    String value = sc.nextLine();
                    list.add(value);
                    break;

                case 2:
                    System.out.print("Enter value to remove: ");
                    String toRemove = sc.nextLine();
                    list.remove(toRemove);
                    break;

                case 3:
                    list.display();
                    break;

                case 4:
                    System.out.println("Size: " + list.getSize());
                    break;

                case 5:
                    try {
                        System.out.print("Enter index: ");
                        int index = sc.nextInt();
                        System.out.println("Element at index " + index + ": " + list.get(index));
                    } catch (IndexOutOfBoundsException e) {
                        System.out.println(e.getMessage());
                    }
                    break;

                case 6:
                    System.out.println("Exiting...");
                    sc.close();
                    return;

                default:
                    System.out.println("Invalid choice!");
            }
        }
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------
Task0016:


class Node {
    int data;
    Node prev, next;

    Node(int data) {
        this.data = data;
        prev = next = null;
    }
}

class DoublyLinkedList {
    Node head, tail;

    // Add node at the end
    void add(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = tail = newNode;
        } else {
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
    }

    // Display from head to tail
    void displayForward() {
        Node temp = head;
        System.out.print("Forward: ");
        while (temp != null) {
            System.out.print(temp.data + " <-> ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    // Display from tail to head
    void displayBackward() {
        Node temp = tail;
        System.out.print("Backward: ");
        while (temp != null) {
            System.out.print(temp.data + " <-> ");
            temp = temp.prev;
        }
        System.out.println("null");
    }
}

public class Main {
    public static void main(String[] args) {
        DoublyLinkedList list = new DoublyLinkedList();

        list.add(10);
        list.add(20);
        list.add(30);

        list.displayForward();   // Forward: 10 <-> 20 <-> 30 <-> null
        list.displayBackward();  // Backward: 30 <-> 20 <-> 10 <-> null
    }
}
-------------------------------------------------------------------------------------------------------------------------------

Task21:

// Node class to hold data and next pointer
class Node {
    int data;
    Node next;

    // Constructor
    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

// Custom class for Circular Linked List
class CircularLinkedList {
    private Node head = null;
    private Node tail = null;

    // ✅ Custom method to add data to the circular linked list
    public void add(int value) {
        Node newNode = new Node(value);

        if (head == null) {
            head = tail = newNode;
            newNode.next = head; // circular link
        } else {
            tail.next = newNode;
            tail = newNode;
            tail.next = head; // re-link tail to head
        }
    }

    // ✅ Custom method to display all elements (traverse)
    public void display() {
        if (head == null) {
            System.out.println("Circular Linked List is empty.");
            return;
        }

        Node current = head;
        System.out.print("Circular Linked List: ");
        do {
            System.out.print(current.data + " -> ");
            current = current.next;
        } while (current != head);

        System.out.println("(back to head)");
    }
}

// Main class to run the program
public class Main {
    public static void main(String[] args) {
        CircularLinkedList cll = new CircularLinkedList();

        // Adding elements using custom method
        cll.add(5);
        cll.add(10);
        cll.add(15);
        cll.add(20);

        // Displaying all elements
        cll.display();
    }
}
---------------------------------------------------------------------------------------
linkedlist:
package DAY14;


class Node {
    int data;
    Node next;

    // Constructor
    Node(int value) {
        data = value;
        next = null;
    }
}

class LinkedList {
    private Node head;

    // Constructor
    public LinkedList() {
        head = null;
    }

    // Insert at end
    public void insertAtEnd(int value) {
        Node newNode = new Node(value);
        if (head == null) {
            head = newNode;
        } else {
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newNode;
        }
    }



    // Display the list
    public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.println("NULL");
    }
}

public class TaskLL001{
    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        list.insertAtEnd(10);
        list.insertAtEnd(20);
        list.insertAtEnd(30);

        System.out.print("Linked List: ");
        list.display();




    }
}

------------------------------------------------------------------
Circular Linked list


class Node {
    int data;
    Node next;

    // Constructor
    Node(int value) {
        data = value;
        next = null;
    }
}

class CircularLinkedList {
    private Node head;

    // Constructor
    public CircularLinkedList() {
        head = null;
    }

    // Insert at end
    public void insertAtEnd(int value) {
        Node newNode = new Node(value);

        if (head == null) {
            head = newNode;
            newNode.next = head;  // Point to itself
        } else {
            Node temp = head;

            while (temp.next != head) {
                temp = temp.next;
            }

            temp.next = newNode;
            newNode.next = head;
        }
    }

    // Display the list
    public void display() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }

        Node temp = head;
        System.out.print("Circular Linked List: ");

        do {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        } while (temp != head);

        System.out.println("(back to head)");
    }
}

public class TaskLL001 {
    public static void main(String[] args) {
        CircularLinkedList list = new CircularLinkedList();

        list.insertAtEnd(10);
        list.insertAtEnd(20);
        list.insertAtEnd(30);
        list.insertAtEnd(40);

        list.display();
    }
}
------------------------------------------------------------------------------------------------------
delete node
class Node {
    int data;
    Node next;

    // Constructor
    Node(int value) {
        data = value;
        next = null;
    }
}

class CircularLinkedList {
    private Node head;

    // Insert at end
    public void insertAtEnd(int value) {
        Node newNode = new Node(value);
        if (head == null) {
            head = newNode;
            newNode.next = head;
        } else {
            Node temp = head;
            while (temp.next != head) {
                temp = temp.next;
            }
            temp.next = newNode;
            newNode.next = head;
        }
    }

    // Delete a node by value
    public void delete(int value) {
        if (head == null) return;

        Node current = head, prev = null;

        // If head is the node to be deleted
        if (head.data == value) {
            // Only one node
            if (head.next == head) {
                head = null;
                return;
            }

            // Find the last node to update its next
            Node last = head;
            while (last.next != head) {
                last = last.next;
            }

            last.next = head.next;
            head = head.next;
            return;
        }

        // For non-head nodes
        do {
            prev = current;
            current = current.next;
            if (current.data == value) {
                prev.next = current.next;
                return;
            }
        } while (current != head);
    }

    // Display the list
    public void display() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }

        Node temp = head;
        System.out.print("Circular Linked List: ");
        do {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        } while (temp != head);

        System.out.println("(back to head)");
    }
}

public class TaskLL001 {
    public static void main(String[] args) {
        CircularLinkedList list = new CircularLinkedList();

        list.insertAtEnd(10);
        list.insertAtEnd(20);
        list.insertAtEnd(30);
        list.insertAtEnd(40);

        list.display(); // Before deletion

        list.delete(10);  // Delete head
        list.display();

        list.delete(30);  // Delete middle node
        list.display();

        list.delete(40);  // Delete last node
        list.display();

        list.delete(20);  // Delete last remaining node
        list.display();
    }
}


-----------------------------------------------------
queue
// Node class
class Node {
    int data;
    Node next;

    Node(int value) {
        data = value;
        next = null;
    }
}

// Custom Queue class
class CustomQueue {
    private Node front, rear;

    // Constructor
    public CustomQueue() {
        front = rear = null;
    }

    // Enqueue - Add element at rear
    public void enqueue(int value) {
        Node newNode = new Node(value);

        if (rear == null) {  // First element
            front = rear = newNode;
        } else {
            rear.next = newNode;
            rear = newNode;
        }
    }

    // Dequeue - Remove element from front
    public int dequeue() {
        if (front == null) {
            System.out.println("Queue is empty");
            return -1;
        }

        int value = front.data;
        front = front.next;

        if (front == null) {
            rear = null;  // Queue becomes empty
        }

        return value;
    }

    // Peek - See front element
    public int peek() {
        if (front == null) {
            System.out.println("Queue is empty");
            return -1;
        }

        return front.data;
    }

    // Display the queue
    public void display() {
        if (front == null) {
            System.out.println("Queue is empty");
            return;
        }

        Node temp = front;
        System.out.print("Queue: ");
        while (temp != null) {
            System.out.print(temp.data + " <- ");
            temp = temp.next;
        }
        System.out.println("null");
    }
}


public class Main {
    public static void main(String[] args) {
        CustomQueue queue = new CustomQueue();

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        queue.display();  // Output: 10 <- 20 <- 30 <- null

        System.out.println("Front element (peek): " + queue.peek());

        System.out.println("Dequeued: " + queue.dequeue());
        queue.display();  // Output: 20 <- 30 <- null
    }
}
