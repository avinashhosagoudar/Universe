https://docs.google.com/document/d/1EcEMFroqTD7U3l83N2dyt8mWLSRgh9YHdZuF194uXFg/edit?tab=t.0



// Online Java Compiler
// Use this editor to write, compile and run your Java code online

uisng linkedlist  insertion and deletion of data

class Node {
    int data;
    Node next;

    // Constructor
    Node(int value) {
        data = value;
        next = null;
    }
}

class LinkedList {
    private Node head;

    // Constructor
    public LinkedList() {
        head = null;
    }

    // Insert at end
    public void insertAtEnd(int value) {
        Node newNode = new Node(value);
        if (head == null) {
            head = newNode;
        } else {
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newNode;
        }
    }

    // Delete by value
    public void deleteByValue(int value) {
        if (head == null) return;

        if (head.data == value) {
            head = head.next;
            return;
        }

        Node temp = head;
        while (temp.next != null && temp.next.data != value) {
            temp = temp.next;
        }

        if (temp.next != null) {
            temp.next = temp.next.next;
        }
    }

    // Display the list
    public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.println("NULL");
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        list.insertAtEnd(10);
        list.insertAtEnd(20);
        list.insertAtEnd(30);

        System.out.print("Linked List: ");
        list.display();

        list.deleteByValue(20);

        System.out.print("After Deleting 20: ");
        list.display();
    }
}


import java.util.Scanner;

class Node {
    Object data; // Accept any type of data
    Node next;

    Node(Object value) {
        data = value;
        next = null;
    }
}

class LinkedList {
    private Node head;

    public LinkedList() {
        head = null;
    }

    // Insert at end
    public void insertAtEnd(Object value) {
        Node newNode = new Node(value);
        if (head == null) {
            head = newNode;
        } else {
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newNode;
        }
    }

    // Display the list
    public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("NULL");
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        Scanner scanner = new Scanner(System.in);

        System.out.print("How many elements? ");
        int n = Integer.parseInt(scanner.nextLine());

        for (int i = 0; i < n; i++) {
            System.out.print("Enter value " + (i + 1) + ": ");
            String input = scanner.nextLine();
            // Store input as Object (you can later convert if needed)
            list.insertAtEnd(input);
        }

        System.out.print("Linked List: ");
        list.display();
    }
}


public class Main {
    public static void main(String[] args) {
        CustomLinkedList list = new CustomLinkedList();

        list.add(10);
        list.add("Java");
        list.add(3.14);
        list.add(true);

        System.out.print("All Elements: ");
        list.display();

        System.out.println("Size: " + list.getSize());

        System.out.println("Element at index 2: " + list.get(2));

        list.remove("Java");

        System.out.print("After removing 'Java': ");
        list.display();

        System.out.println("Size: " + list.getSize());

        // Uncomment this to test IndexOutOfBounds
        // System.out.println(list.get(10)); // Throws exception
    }
}
--------------------------------------------------------------------------------------------------------------------------------------
Task004:



class Node {
    Object data;
    Node next;

    Node(Object data) {
        this.data = data;
        this.next = null;
    }
}

class CustomLinkedList {
    private Node head;
    private int size;

    public CustomLinkedList() {
        head = null;
        size = 0;
    }

    // 1. Create & Insert at End
    public void add(Object data) {
        Node newNode = new Node(data);
        size++;

        if (head == null) {
            head = newNode;
            return;
        }

        Node temp = head;
        while (temp.next != null)
            temp = temp.next;

        temp.next = newNode;
    }

    // 2. Remove node by value
    public void remove(Object data) {
        if (head == null) return;

        if (head.data.equals(data)) {
            head = head.next;
            size--;
            return;
        }

        Node temp = head;
        while (temp.next != null && !temp.next.data.equals(data)) {
            temp = temp.next;
        }

        if (temp.next != null) {
            temp.next = temp.next.next;
            size--;
        } else {
            System.out.println("Value not found.");
        }
    }

    // 3. Display list
    public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("NULL");
    }

    // 4. Size of the list
    public int getSize() {
        return size;
    }

    // 5. Get element at specific index (with index check)
    public Object get(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Index " + index + " is out of bounds.");
        }

        Node temp = head;
        for (int i = 0; i < index; i++)
            temp = temp.next;

        return temp.data;
    }
}


public class Main {
    public static void main(String[] args) {
        CustomLinkedList list = new CustomLinkedList();

        list.add(10);
        list.add("Java");
        list.add(3.14);
        list.add(true);

        System.out.print("All Elements: ");
        list.display();

        System.out.println("Size: " + list.getSize());

        System.out.println("Element at index 2: " + list.get(2));

        list.remove("Java");

        System.out.print("After removing 'Java': ");
        list.display();

        System.out.println("Size: " + list.getSize());

        // Uncomment this to test IndexOutOfBounds
        // System.out.println(list.get(10)); // Throws exception
    }
}

---------------------------------------------------------------------------------------------------------------------------
import java.util.Scanner;

class Node {
    Object data;
    Node next;

    Node(Object data) {
        this.data = data;
        this.next = null;
    }
}

class CustomLinkedList {
    private Node head;
    private int size;

    public void add(Object data) {
        Node newNode = new Node(data);
        size++;

        if (head == null) {
            head = newNode;
            return;
        }

        Node temp = head;
        while (temp.next != null)
            temp = temp.next;

        temp.next = newNode;
    }

    public void remove(Object data) {
        if (head == null) return;

        if (head.data.equals(data)) {
            head = head.next;
            size--;
            return;
        }

        Node temp = head;
        while (temp.next != null && !temp.next.data.equals(data)) {
            temp = temp.next;
        }

        if (temp.next != null) {
            temp.next = temp.next.next;
            size--;
        } else {
            System.out.println("Value not found.");
        }
    }

    public void display() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("NULL");
    }

    public int getSize() {
        return size;
    }

    public Object get(int index) {
        if (index < 0 || index >= size)
            throw new IndexOutOfBoundsException("Index " + index + " is out of bounds.");

        Node temp = head;
        for (int i = 0; i < index; i++)
            temp = temp.next;

        return temp.data;
    }
}


public class Main {
    public static void main(String[] args) {
        CustomLinkedList list = new CustomLinkedList();
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("\n----- MENU -----");
            System.out.println("1. Add Element");
            System.out.println("2. Remove Element");
            System.out.println("3. Display List");
            System.out.println("4. Get Size");
            System.out.println("5. Get Element by Index");
            System.out.println("6. Exit");
            System.out.print("Choose an option: ");

            int choice = sc.nextInt();
            sc.nextLine(); // consume leftover newline

            switch (choice) {
                case 1:
                    System.out.print("Enter any value (string, number, etc.): ");
                    String value = sc.nextLine();
                    list.add(value);
                    break;

                case 2:
                    System.out.print("Enter value to remove: ");
                    String toRemove = sc.nextLine();
                    list.remove(toRemove);
                    break;

                case 3:
                    list.display();
                    break;

                case 4:
                    System.out.println("Size: " + list.getSize());
                    break;

                case 5:
                    try {
                        System.out.print("Enter index: ");
                        int index = sc.nextInt();
                        System.out.println("Element at index " + index + ": " + list.get(index));
                    } catch (IndexOutOfBoundsException e) {
                        System.out.println(e.getMessage());
                    }
                    break;

                case 6:
                    System.out.println("Exiting...");
                    sc.close();
                    return;

                default:
                    System.out.println("Invalid choice!");
            }
        }
    }
}
